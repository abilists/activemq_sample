plugins {
    id 'java'
    id 'eclipse'
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

archivesBaseName = 'batchSample'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
	mavenLocal()
}

version = 'v1.0.0'

tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': 'ACTIVEMQ-BATCH', 'Implementation-Version': project.version)
    }
}

ext {
	slf4jVersion = '1.7.36'
	logbackVersion = '1.3.4'
	springVersion = '5.3.30'
	emailVersion = '0.0.8'
}

dependencies {
	implementation 'org.slf4j:slf4j-api:' + slf4jVersion
	runtimeOnly 'org.slf4j:jcl-over-slf4j:' + slf4jVersion
	implementation 'ch.qos.logback:logback-core:' + logbackVersion
	implementation 'ch.qos.logback:logback-classic:' + logbackVersion
	implementation 'org.apache.commons:commons-configuration2:2.11.0'
	// implementation "org.apache.commons:commons-dbcp2:2.9.0"
	// implementation "org.apache.commons:commons-pool2:2.11.1"
	implementation "commons-dbcp:commons-dbcp:1.4"
	implementation "commons-pool:commons-pool:1.6"
    implementation 'org.springframework:spring-core:' + springVersion
	implementation 'org.springframework:spring-context:' + springVersion
	implementation 'org.springframework:spring-jdbc:' + springVersion
	implementation 'org.springframework:spring-tx:' + springVersion
	testImplementation 'org.springframework:spring-test:' + springVersion
	implementation 'mysql:mysql-connector-java:5.1.36'
	implementation 'org.mybatis:mybatis:3.3.0'
	implementation 'org.mybatis:mybatis-spring:1.2.3'
	implementation 'org.apache.activemq:activemq-client:5.16.7'
	implementation "io.utility:email:" + emailVersion
	testImplementation 'org.springframework:spring-test:' + springVersion
    testImplementation "junit:junit:4.+"
}

final String DEFAULT_PROFILE = 'develop'
allprojects {
	if (!project.hasProperty('profile') || !profile) {
		ext.profile = DEFAULT_PROFILE
	}
    sourceSets {
        main {
            resources {
                srcDir "config/${profile}"
            }
        }
    }
}

//  gradle zip -Pprofile=staging
task zip(type: Zip) {
	from 'src/dist'
	from jar.outputs.files
	baseName = 'batchSample'
	into('libs') {
		from configurations.runtimeOnly
	}
	into('sh') {
		from 'sh/batchSample.sh'
	}
}

// Command is
// gradle zip
zip.dependsOn(assemble)
//assemble.dependsOn(zip)

// $ gradle wrapper
// $ gradlew zip
// $ gradlew zip -Pprofile=staging